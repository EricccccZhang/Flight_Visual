// Generated by CoffeeScript 1.4.0
(function() {
  var FlightPatternsApp,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FlightPatternsApp = (function(_super) {
    var airportLocationFile, flightFile, font, graph, loopFile, maxCircleRadius, minHeight, presentVarName, savingsCalculator, speedUp;

    __extends(FlightPatternsApp, _super);

    flightFile = "data/flighthistory-2012-11-20.csv.minimized.csv";

    airportLocationFile = "data/Airport_Codes_mapped_to_Latitude_Longitude_in_the_United_States.csv";

    loopFile = "data/loops.json";

    minHeight = 600;

    savingsCalculator = new SavingsCalculator();

    graph = new AirportGraph();

    maxCircleRadius = 50;

    font = "Inspira";

    presentVarName = 'presentT';

    speedUp = 1;

    FlightPatternsApp.prototype.fadeInHeader = function() {
      console.log(window);
      if (window.innerHeight < 800) {
        $('#FlightPatterns').addClass('shrink');
      }
      d3.select('.header').classed('animated', true).style('opacity', 1);
      return setTimeout(this.doIntro, 250);
    };

    FlightPatternsApp.prototype.doIntro = function() {
      this.introGoing = true;
      return d3.select('#intro_hype_container').append('script').attr('src', 'intro.hyperesources/intro_hype_generated_script.js');
    };

    FlightPatternsApp.prototype.introComplete = function() {
      if (!this.introGoing) {
        return;
      }
      this.introGoing = false;
      return this.fadeOutIntro();
    };

    FlightPatternsApp.prototype.fadeOutIntro = function() {
      return $('#intro').fadeOut(400, this.fadeInViz);
    };

    FlightPatternsApp.prototype.fadeInViz = function() {
      var that;
      $('.viz').css('visibility', 'visible').css('opacity', 1);
      $('.clock, .dailyStats-title, .dailyStat').addClass('opacityAnimation');
      $('.viz .dailyStats-title').css('opacity', 1);
      that = this;
      return setTimeout(function() {
        $('.viz .dailyStat').css('opacity', 1);
        return setTimeout(function() {
          $('.clock.eastern').css('opacity', 1);
          setTimeout(function() {
            return $('.clock.central').css('opacity', 1);
          }, 200 * speedUp);
          setTimeout(function() {
            return $('.clock.mountain').css('opacity', 1);
          }, 400 * speedUp);
          setTimeout(function() {
            return $('.clock.pacific').css('opacity', 1);
          }, 600 * speedUp);
          return setTimeout(that.initViz, 1000 * speedUp);
        }, 400 * speedUp);
      }, 500 * speedUp);
    };

    FlightPatternsApp.prototype.initViz = function() {
      var duration, fleet, fleetLbl, ins, minutes;
      this.presetMode = false;
      if (typeof urlParams[presentVarName] !== 'undefined') {
        duration = +urlParams[presentVarName] * 1000;
        if (isNaN(duration)) {
          duration = 60 * 3 * 1000;
        }
        this.presentDuration = duration;
        this.presentMode = true;
      }
      this.defaultFleetSizeSlider = 2;
      if (typeof urlParams['fleet'] !== 'undefined') {
        fleet = urlParams['fleet'];
        fleetLbl = 'medium';
        if (fleet === 's') {
          fleetLbl = 'small';
          this.defaultFleetSizeSlider = 1;
        } else if (fleet === 'm') {
          fleetLbl = 'medium';
          this.defaultFleetSizeSlider = 2;
        } else if (fleet === 'l') {
          fleetLbl = 'large';
          this.defaultFleetSizeSlider = 3;
        }
        ins = savingsCalculator.inputs;
        ins.fleetSize = savingsCalculator.fleetSizes[fleetLbl];
        savingsCalculator.calculate();
        $('.dailyStat-airlineSize .dailyStatCaption').text(fleetLbl + ' sized fleet');
      }
      if (typeof urlParams['m'] !== 'undefined') {
        minutes = +urlParams['m'];
        if (!isNaN(minutes && minutes >= 1 && minutes <= 5 && minutes % 0.5 === 0)) {
          ins = savingsCalculator.inputs;
          ins.blockMinutesSaved = minutes;
          savingsCalculator.calculate();
        }
      }
      this.mapDimensions = {
        width: $('#planesCanvas').width(),
        height: $('#planesCanvas').height()
      };
      this.initUI();
      this.mapping = d3.geo.albers().scale(1300).translate([480 - 20, 300]);
      _.each(this.airportsObject, function(airport) {
        return airport.pos = this.mapping([-airport.Longitude, +airport.Latitude]);
      }, this);
      this.ctxt = document.getElementById('planesCanvas').getContext('2d');
      return setTimeout(this.initSimulation, 250);
    };

    FlightPatternsApp.prototype.initUI = function() {
      var minuteOpts, sizeOpts;
      $('.createBtn').on('click', this.clickCreateBtn);
      minuteOpts = {
        value: savingsCalculator.inputs.blockMinutesSaved,
        min: 1,
        max: 5,
        step: 0.5
      };
      $('.create .minutesSlider').slider(minuteOpts);
      sizeOpts = {
        value: this.defaultFleetSizeSlider,
        min: 1,
        max: 3,
        step: 1
      };
      $('.create .airlineSizeSlider').slider(sizeOpts);
      $('.create .playBtn').on('click', this.playNewScenario);
      $('.aboutText').addClass('animated');
      $('.aboutLink, .share').addClass('visible');
      $('.aboutLink, .aboutText .close').on('click', this.clickAboutLink);
      return $('.share li').on('click', this.clickShareLink);
    };

    FlightPatternsApp.prototype.initSimulation = function() {
      var dateRanges, hour, maxArrivals, maxArrivalsAirport, numPlanes;
      this.simulatorTween = 0;
      d3.shuffle(this.flightData);
      numPlanes = savingsCalculator.inputs.fleetSize;
      this.numPlanes = numPlanes;
      savingsCalculator.calculate();
      this.setTickerNumber($('.dailyStat-timeSavedPer .dailyStatsValue'), savingsCalculator.inputs.blockMinutesSaved, 1, 28, 'darkDigit', true);
      this.setTickerNumber($('.dailyStat-airlineSize .dailyStatsValue'), savingsCalculator.inputs.fleetSize, 1, 28, 'darkDigit', true);
      this.simulatorPlanes = [];
      hour = 60 * 60;
      this.minDuration = hour * 1.5;
      this.airports = [];
      this.airportMap = {};
      this.timeRanges = [new Date().getTime(), 0];
      this.numArrivalsEachAirport = {};
      d3.shuffle(this.loopData.loops);
      _.each(this.loopData.loops[0], this.addFlight, this);
      _.each(this.loopData.loops[1], this.addFlight, this);
      _.each(this.flightData, this.addFlight, this);
      maxArrivals = 0;
      maxArrivalsAirport = null;
      _.each(this.numArrivalsEachAirport, function(numArrivals, airportCode) {
        if (numArrivals > maxArrivals) {
          maxArrivalsAirport = airportCode;
          return maxArrivals = numArrivals;
        }
      });
      this.airportCircleSizeScale = d3.scale.sqrt().domain([1, maxArrivals]).range([10, maxCircleRadius]);
      this.timeRanges[0] -= hour;
      this.timeRanges[1] += hour;
      this.simulatorTimeRanges = this.timeRanges;
      this.simulatorTimeDiff = this.timeRanges[1] - this.timeRanges[0];
      dateRanges = [new Date(this.timeRanges[0] * 1000), new Date(this.timeRanges[1] * 1000)];
      this.simulatorAnimationDuration = 16000 * speedUp;
      if (this.presentMode) {
        this.simulatorAnimationDuration = this.presentDuration;
      }
      this.startTime = null;
      this.prevUTCHours = -1;
      this.planesDeparted = 0;
      this.planesLanded = 0;
      requestAnimationFrame(this.simulate);
      return this.getPolygons();
    };

    FlightPatternsApp.prototype.addFlight = function(plane, planeIndex) {
      var fromLocation, toLocation;
      if (this.simulatorPlanes.length === this.numPlanes) {
        return;
      }
      plane.start = +plane.start;
      plane.end = +plane.end;
      fromLocation = this.airportsObject[plane.from];
      toLocation = this.airportsObject[plane.to];
      if (typeof fromLocation === 'undefined') {
        return;
      }
      if (typeof toLocation === 'undefined') {
        return;
      }
      plane.fromScreen = this.mapping([-fromLocation.Longitude, fromLocation.Latitude]);
      plane.toScreen = this.mapping([-toLocation.Longitude, toLocation.Latitude]);
      plane.screenDiff = [plane.toScreen[0] - plane.fromScreen[0], plane.toScreen[1] - plane.fromScreen[1]];
      plane.duration = plane.end - plane.start;
      plane.angle = Math.atan2(plane.screenDiff[1], plane.screenDiff[0]);
      if (plane.duration < this.minDuration) {
        return;
      }
      if (typeof this.numArrivalsEachAirport[plane.to] === 'undefined') {
        this.numArrivalsEachAirport[plane.to] = 0;
      }
      this.numArrivalsEachAirport[plane.to] += 1;
      if (plane.start < this.timeRanges[0]) {
        this.timeRanges[0] = plane.start;
      }
      if (plane.end > this.timeRanges[1]) {
        this.timeRanges[1] = plane.end;
      }
      plane.departed = false;
      plane.landed = false;
      return this.simulatorPlanes.push(plane);
    };

    FlightPatternsApp.prototype.boardNumberFormatter = function(number) {
      var strNumber;
      number = +number;
      strNumber = "";
      if (number < 10) {
        strNumber = number.toPrecision(2);
      } else {
        strNumber = Math.round(number);
      }
      return strNumber;
    };

    FlightPatternsApp.prototype.simulate = function() {
      var time, tweenAmount;
      time = new Date().getTime();
      if (this.startTime === null) {
        this.startTime = time;
      }
      time = time - this.startTime;
      tweenAmount = time / this.simulatorAnimationDuration;
      if (tweenAmount > 1) {
        tweenAmount = 1;
      }
      this.simulatedTime = (tweenAmount * this.simulatorTimeDiff) + (+this.simulatorTimeRanges[0]);
      this.ctxt.clearRect(0, 0, 960, 600);
      this.drawPolys();
      this.drawPlanes(this.simulatedTime);
      this.drawAirports(this.simulatedTime);
      this.updateClocks(this.simulatedTime);
      this.updateStats(this.simulatedTime, tweenAmount);
      if (time <= this.simulatorAnimationDuration) {
        return requestAnimationFrame(this.simulate);
      } else {
        return setTimeout(this.outro, 1000);
      }
    };

    FlightPatternsApp.prototype.drawAirports = function() {
      var airportFontSize, airportLabels, airportLblAtPct, now;
      airportLblAtPct = 0.5;
      airportFontSize = 24;
      airportLabels = [];
      now = new Date().getTime();
      _.each(this.airports, function(airport, aIndex) {
        var angle, dimensions, finalX, finalXEnd, finalY, maxWhiteRadius, multiplier, newTargetR, r, textDimensions, textXOffset, textYOffset, tweenEnd, tweenProgress, whiteRadius, width, x, y;
        x = airport.x;
        y = airport.y;
        newTargetR = this.airportCircleSizeScale(airport.count);
        if (airport.targetR !== newTargetR) {
          airport.targetR = newTargetR;
          airport.tweenVal = 0;
          airport.prevR = airport.tweenR;
          airport.tweenStart = now;
        }
        tweenProgress = now - airport.tweenStart;
        tweenEnd = airport.tweenMax / 60 * 1000;
        if (tweenProgress > tweenEnd) {
          tweenProgress = tweenEnd;
        }
        airport.tweenR = $.easing.easeOutQuad(tweenProgress / tweenEnd, tweenProgress, airport.prevR, airport.targetR - airport.prevR, tweenEnd);
        r = airport.tweenR;
        if (r < 0) {
          r = 0;
        }
        this.ctxt.beginPath();
        this.ctxt.fillStyle = "rgba(250,18,255,0.5)";
        this.ctxt.arc(x, y, r, 0, Math.PI * 2, false);
        this.ctxt.fill();
        this.ctxt.beginPath();
        this.ctxt.fillStyle = "rgba(255,255,255,0.5)";
        maxWhiteRadius = 4;
        whiteRadius = r > maxWhiteRadius ? maxWhiteRadius : r;
        this.ctxt.arc(x, y, whiteRadius, 0, Math.PI * 2, false);
        this.ctxt.fill();
        if (airport.targetR > airportLblAtPct * maxCircleRadius) {
          this.ctxt.fillStyle = "white";
          this.ctxt.font = airportFontSize + "px " + font;
          angle = airport.angle;
          textXOffset = Math.cos(angle) * r;
          textYOffset = Math.sin(angle) * r;
          textDimensions = this.ctxt.measureText(airport.code);
          if (textXOffset < 0) {
            textXOffset -= textDimensions.width;
          }
          if (textYOffset > 0) {
            textYOffset += airportFontSize - 2;
          }
          finalX = x + textXOffset;
          finalY = y + textYOffset;
          finalXEnd = finalX + textDimensions.width;
          if (finalX < 0 || finalXEnd > this.mapDimensions.width) {
            multiplier = 1;
            if (finalXEnd > this.mapDimensions.width) {
              multiplier = -1;
            }
            if (textYOffset > 0) {
              angle -= multiplier * Math.PI / 2;
            } else {
              angle += multiplier * Math.PI / 2;
            }
            textXOffset = Math.cos(angle) * r;
            textYOffset = Math.sin(angle) * r;
            if (textXOffset < 0) {
              textXOffset -= textDimensions.width;
            }
            if (textYOffset > 0) {
              textYOffset += airportFontSize - 2;
            }
            finalX = x + textXOffset;
            finalY = y + textYOffset;
          }
          width = this.ctxt.measureText(airport.code);
          dimensions = [finalX, finalY - airportFontSize, finalX + width.width, finalY];
          airportLabels.push([airport.code, finalX, finalY, dimensions, true]);
        }
        if (airport.tweenVal < airport.tweenMax) {
          return airport.tweenVal += 1;
        }
      }, this);
      this.ctxt.fillStyle = "white";
      return _.each(airportLabels, function(lbl, lblIndex) {
        var i, overlaps, rect1, rect2, _i, _ref;
        overlaps = false;
        rect1 = lbl[3];
        if (lblIndex > 0) {
          for (i = _i = 0, _ref = lblIndex - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            if (airportLabels[i][4]) {
              rect2 = airportLabels[i][3];
              overlaps = rect1[0] < rect2[2] && rect1[2] > rect2[0] && rect1[1] < rect2[3] && rect1[3] > rect2[1];
              if (overlaps) {
                lbl[4] = false;
                return;
              }
            }
          }
        }
        return this.ctxt.fillText(lbl[0], lbl[1], lbl[2]);
      }, this);
    };

    FlightPatternsApp.prototype.updateClocks = function(simulatorTime) {
      var central, date, eastern, mountain, pacific, utcHours;
      date = new Date(simulatorTime * 1000);
      utcHours = date.getUTCHours();
      if (this.prevUTCHours === utcHours) {
        return;
      }
      this.prevUTCHours = utcHours;
      eastern = this.displayHours(utcHours - 5);
      central = this.displayHours(utcHours - 6);
      mountain = this.displayHours(utcHours - 7);
      pacific = this.displayHours(utcHours - 8);
      $('.clock.pacific .time').text(pacific[0]);
      $('.clock.mountain .time').text(mountain[0]);
      $('.clock.central .time').text(central[0]);
      $('.clock.eastern .time').text(eastern[0]);
      $('.clock.pacific .clockSprite').attr('class', 'clockSprite hour' + pacific[1]);
      $('.clock.mountain .clockSprite').attr('class', 'clockSprite hour' + mountain[1]);
      $('.clock.central .clockSprite').attr('class', 'clockSprite hour' + central[1]);
      return $('.clock.eastern .clockSprite').attr('class', 'clockSprite hour' + eastern[1]);
    };

    FlightPatternsApp.prototype.updateStats = function(simulatorTime, tweenAmount) {
      var landedPct, minSavedPerDay, minSavedPerYear, minSavedSoFar, moneySavedPerDay, moneySavedPerYear, moneySavedSoFar, timeLbl;
      landedPct = this.planesLanded / savingsCalculator.inputs.fleetSize;
      minSavedPerYear = savingsCalculator.outputs.minutesSavedPerYear;
      minSavedPerDay = minSavedPerYear / 365;
      minSavedSoFar = minSavedPerDay * landedPct;
      moneySavedPerYear = savingsCalculator.outputs.totalSavingsPerYear;
      moneySavedPerDay = moneySavedPerYear / 365;
      moneySavedSoFar = moneySavedPerDay * landedPct;
      timeLbl = 'minutes';
      if (minSavedSoFar >= 600) {
        minSavedSoFar /= 60;
        timeLbl = 'hours';
      }
      $('.dailyStat-timeSavings .dailyStatCaption').text(timeLbl);
      this.setTickerNumber($('.dailyStat-arrivals .dailyStatsValue'), this.planesLanded, 1, 28, 'darkDigit', false);
      this.setTickerNumber($('.dailyStat-moneySavings .dailyStatsValue'), moneySavedSoFar, 1000, 42, 'blueDigit', true);
      return this.setTickerNumber($('.dailyStat-timeSavings .dailyStatsValue'), minSavedSoFar, 1, 42, 'blueDigit', true);
    };

    FlightPatternsApp.prototype.setTickerNumber = function($parent, value, scale, digitSize, selector, formatDecimal) {
      var blueDigits, digits, iPart, round, roundValue, strVal;
      value /= scale;
      digits = null;
      if (value === 0 && formatDecimal) {
        digits = [0, '.', 0];
      } else if (value === 0) {
        digits = [0, 0, 0];
      } else if (value < 1) {
        round = Math.round(value * 10);
        digits = [0, '.', round];
      } else if (value < 10 && formatDecimal) {
        iPart = Math.floor(value);
        digits = [iPart, '.', Math.round((value - iPart) * 10)];
      } else if (value < 10) {
        digits = [0, 0, value];
      } else if (value < 100) {
        roundValue = "" + Math.round(value);
        digits = [0, +roundValue.charAt(0), +roundValue.charAt(1)];
      } else if (value < 1000) {
        strVal = "" + value;
        digits = [+strVal.charAt(0), +strVal.charAt(1), +strVal.charAt(2)];
      } else {
        console.error('trying to display value to large in tickers ' + value);
        strVal = "" + value;
        digits = [+strVal.charAt(strVal.length - 3), +strVal.charAt(strVal.length - 2), +strVal.charAt(strVal.length - 1)];
      }
      blueDigits = d3.select($parent[0]).selectAll('.' + selector).data(digits);
      return blueDigits.style('background-position', function(d, i) {
        var r;
        r = 0;
        if (typeof d === 'number') {
          r = d * -digitSize + 'px';
        } else {
          r = -digitSize * 10 + 'px';
        }
        return "0px " + r;
      });
    };

    FlightPatternsApp.prototype.displayHours = function(hours) {
      var dispHours, text;
      if (hours < 0) {
        hours += 24;
      }
      dispHours = hours;
      if (hours > 12) {
        dispHours -= 12;
      }
      if (dispHours === 0) {
        dispHours = 12;
      }
      text = "" + dispHours + " ";
      if (hours < 12) {
        text += "am";
      } else {
        text += "pm";
      }
      return [text, dispHours];
    };

    FlightPatternsApp.prototype.drawPlanes = function(simulatorTime) {
      var planeH, planeIcons, planeW, scalingDuration;
      this.ctxt.strokeStyle = "rgba(255,255,255,0.5)";
      this.ctxt.beginPath();
      planeIcons = [];
      scalingDuration = 0.2;
      _.each(this.simulatorPlanes, function(simPlane, planeIndex) {
        var finalX, finalY, flightDurationPct, scale;
        if (simulatorTime < simPlane.start) {

        } else if (simulatorTime > simPlane.end) {
          if (!simPlane.departed) {
            this.departPlane(simPlane);
          }
          if (!simPlane.landed) {
            this.landPlane(simPlane);
          }
          this.ctxt.moveTo(simPlane.fromScreen[0], simPlane.fromScreen[1]);
          return this.ctxt.lineTo(simPlane.toScreen[0], simPlane.toScreen[1]);
        } else {
          if (!simPlane.departed) {
            this.departPlane(simPlane);
          }
          flightDurationPct = (simulatorTime - simPlane.start) / simPlane.duration;
          this.ctxt.moveTo(simPlane.fromScreen[0], simPlane.fromScreen[1]);
          finalX = simPlane.fromScreen[0] * (1 - flightDurationPct) + simPlane.toScreen[0] * flightDurationPct;
          finalY = simPlane.fromScreen[1] * (1 - flightDurationPct) + simPlane.toScreen[1] * flightDurationPct;
          this.ctxt.lineTo(finalX, finalY);
          scale = 1;
          if (flightDurationPct < scalingDuration) {
            scale = this.map(flightDurationPct, 0, scalingDuration, 0.2, 1);
          }
          if (flightDurationPct > 1 - scalingDuration) {
            scale = this.map(flightDurationPct, 1 - scalingDuration, 1, 1, 0.2);
          }
          return planeIcons.push([finalX, finalY, simPlane.angle, scale]);
        }
      }, this);
      this.ctxt.stroke();
      planeW = 30;
      planeH = 29;
      return _.each(planeIcons, function(planePosition) {
        var scale;
        scale = planePosition[3];
        this.ctxt.save();
        this.ctxt.translate(planePosition[0], planePosition[1]);
        this.ctxt.rotate(planePosition[2]);
        this.ctxt.drawImage(this.planeCached, -planeW / 2 * scale, -planeH / 2 * scale, planeW * scale, planeH * scale);
        return this.ctxt.restore();
      }, this);
    };

    FlightPatternsApp.prototype.landPlane = function(plane) {
      plane.landed = true;
      this.planesLanded += 1;
      return this.incrementAirport(plane.to, plane.toScreen);
    };

    FlightPatternsApp.prototype.drawPolys = function() {
      var drawOpacity, i, now, opacityAdditionAmount, opacityOffsetMultiplier, opacityTween, polyPercentage, polygonPoints, polysToDraw, targetOpacity, tweenEnd, tweenProgress, _i, _ref, _results,
        _this = this;
      now = new Date().getTime();
      polyPercentage = 1;
      opacityAdditionAmount = 0.025;
      opacityOffsetMultiplier = 2;
      if (savingsCalculator.inputs.fleetSize === savingsCalculator.fleetSizes.large) {
        polyPercentage = 0.5;
        opacityAdditionAmount = 0.005;
      }
      if (savingsCalculator.inputs.fleetSize === savingsCalculator.fleetSizes.small) {
        opacityAdditionAmount = 0.0375;
        opacityOffsetMultiplier = 1;
      }
      polysToDraw = this.airportPolygons.length * polyPercentage;
      if (polysToDraw === 0) {
        return;
      }
      _results = [];
      for (i = _i = 0, _ref = polysToDraw - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        polygonPoints = this.airportPolygons[i];
        this.ctxt.beginPath();
        targetOpacity = -opacityAdditionAmount * opacityOffsetMultiplier;
        _.each(polygonPoints, function(airportCode, pointIndex) {
          if (typeof _this.airportMap[airportCode] !== 'undefined') {
            return targetOpacity += _this.airports[_this.airportMap[airportCode]].count * opacityAdditionAmount;
          }
        }, this);
        opacityTween = this.polygonOpacity[i];
        if (opacityTween.targetOpacity !== targetOpacity) {
          opacityTween.tweenVal = 0;
          opacityTween.prevOpacity = opacityTween.tweenOpacity;
          opacityTween.targetOpacity = targetOpacity;
          opacityTween.tweenStart = now;
        }
        tweenProgress = now - opacityTween.tweenStart;
        tweenEnd = opacityTween.tweenMax / 60 * 1000;
        if (tweenProgress > tweenEnd) {
          tweenProgress = tweenEnd;
        }
        opacityTween.tweenOpacity = $.easing.easeInQuad(tweenProgress / tweenEnd, tweenProgress, opacityTween.prevOpacity, opacityTween.targetOpacity - opacityTween.prevOpacity, tweenEnd);
        if (opacityTween.tweenVal < opacityTween.tweenMax) {
          opacityTween.tweenVal += 1;
        }
        drawOpacity = opacityTween.tweenOpacity;
        if (drawOpacity < 0) {
          drawOpacity = 0;
        }
        this.ctxt.fillStyle = "rgba(69,201,214," + drawOpacity + ")";
        _.each(polygonPoints, function(airportCode, pointIndex) {
          var ap;
          ap = _this.airportsObject[airportCode];
          if (pointIndex === 0) {
            return _this.ctxt.moveTo(ap.pos[0], ap.pos[1]);
          } else {
            return _this.ctxt.lineTo(ap.pos[0], ap.pos[1]);
          }
        }, this);
        this.ctxt.closePath();
        _results.push(this.ctxt.fill());
      }
      return _results;
    };

    FlightPatternsApp.prototype.getPolygons = function() {
      var polyOpacity;
      graph.init(this.simulatorPlanes);
      this.tarjanPolys = [];
      this.airportPolygons = graph.polys;
      polyOpacity = [];
      _.each(this.airportPolygons, function(poly) {
        return polyOpacity.push({
          targetOpacity: 0,
          tweenOpacity: 0,
          tweenVal: 0,
          tweenMax: 60,
          prevOpacity: 0
        });
      });
      return this.polygonOpacity = polyOpacity;
    };

    FlightPatternsApp.prototype.departPlane = function(plane) {
      plane.departed = true;
      return this.planesDeparted += 1;
    };

    FlightPatternsApp.prototype.incrementAirport = function(airportCode, airportScreenPos) {
      var a, airport, map;
      map = this.airportMap;
      if (typeof this.airportMap[airportCode] === 'undefined') {
        map[airportCode] = this.airports.length;
        a = {
          code: airportCode,
          x: airportScreenPos[0],
          y: airportScreenPos[1],
          angle: Math.atan2(this.mapDimensions.height / 2 - airportScreenPos[1], this.mapDimensions.width / 2 - airportScreenPos[0]) + Math.PI,
          count: 0,
          prevR: 0,
          targetR: 0,
          tweenR: 0,
          tweenVal: 0,
          tweenMax: 60
        };
        this.airports.push(a);
      }
      airport = this.airports[this.airportMap[airportCode]];
      return airport.count += 1;
    };

    FlightPatternsApp.prototype.resizeVisual = function() {
      var windowHeight;
      windowHeight = $(window).height();
      if (windowHeight < minHeight) {
        windowHeight = minHeight;
      }
      return $('.bg').height(windowHeight);
    };

    function FlightPatternsApp() {
      this.clickShareLink = __bind(this.clickShareLink, this);

      this.getCurrentShareLink = __bind(this.getCurrentShareLink, this);

      this.clickAboutLink = __bind(this.clickAboutLink, this);

      this.playNewScenario = __bind(this.playNewScenario, this);

      this.showCreateScreen = __bind(this.showCreateScreen, this);

      this.clickCreateBtn = __bind(this.clickCreateBtn, this);

      this.clickReplayBtn = __bind(this.clickReplayBtn, this);

      this.outroDigits = __bind(this.outroDigits, this);

      this.outro = __bind(this.outro, this);

      this.cachePlaneImage = __bind(this.cachePlaneImage, this);

      this.loadFlightData = __bind(this.loadFlightData, this);

      this.loadLoops = __bind(this.loadLoops, this);

      this.loadAirportLocationData = __bind(this.loadAirportLocationData, this);

      this.incrementAirport = __bind(this.incrementAirport, this);

      this.departPlane = __bind(this.departPlane, this);

      this.getPolygons = __bind(this.getPolygons, this);

      this.drawPolys = __bind(this.drawPolys, this);

      this.landPlane = __bind(this.landPlane, this);

      this.drawPlanes = __bind(this.drawPlanes, this);

      this.setTickerNumber = __bind(this.setTickerNumber, this);

      this.updateStats = __bind(this.updateStats, this);

      this.updateClocks = __bind(this.updateClocks, this);

      this.drawAirports = __bind(this.drawAirports, this);

      this.simulate = __bind(this.simulate, this);

      this.addFlight = __bind(this.addFlight, this);

      this.initSimulation = __bind(this.initSimulation, this);

      this.initUI = __bind(this.initUI, this);

      this.initViz = __bind(this.initViz, this);

      this.fadeInViz = __bind(this.fadeInViz, this);

      this.fadeOutIntro = __bind(this.fadeOutIntro, this);

      this.introComplete = __bind(this.introComplete, this);

      this.doIntro = __bind(this.doIntro, this);
      $(window).on('resize', this.resizeVisual);
      this.resizeVisual();
      d3.csv(airportLocationFile, this.loadAirportLocationData);
    }

    FlightPatternsApp.prototype.loadAirportLocationData = function(err, data) {
      var airportsObject;
      if (err !== null) {
        console.error('error loading airpot location data');
        console.log(err);
        return;
      }
      this.airportLocationData = data;
      airportsObject = {};
      _.each(this.airportLocationData, function(airport) {
        return airportsObject[airport.locationID] = airport;
      });
      this.airportsObject = airportsObject;
      return d3.json(loopFile, this.loadLoops);
    };

    FlightPatternsApp.prototype.loadLoops = function(err, data) {
      if (err !== null) {
        console.error('error loading loop data');
        console.log(err);
        return;
      }
      this.loopData = data;
      return d3.csv(flightFile, this.loadFlightData);
    };

    FlightPatternsApp.prototype.loadFlightData = function(err, data) {
      if (err !== null) {
        console.error('error loading flight history data');
        console.log(err);
        return;
      }
      this.flightData = data;
      return this.cachePlaneImage();
    };

    FlightPatternsApp.prototype.cachePlaneImage = function() {
      var cacheCanvas, ctxt;
      cacheCanvas = document.createElement('canvas');
      cacheCanvas.width = 30;
      cacheCanvas.height = 29;
      ctxt = cacheCanvas.getContext('2d');
      ctxt.drawImage(document.getElementById('planeIcon'), 0, 0, 30, 29);
      this.planeCached = cacheCanvas;
      return this.fadeInHeader();
    };

    FlightPatternsApp.prototype.map = function(value, istart, istop, ostart, ostop) {
      return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    };

    FlightPatternsApp.prototype.outro = function() {
      var outroFadeDuration, statsYPos;
      outroFadeDuration = 400;
      $('.mapClocks').fadeOut(outroFadeDuration);
      statsYPos = '600px';
      if (!this.presentMode) {
        d3.select('#planesCanvas').transition().duration(outroFadeDuration).style('opacity', 0.5).style('-webkit-filter', 'blur(2px)');
      } else {
        statsYPos = '750px';
        $('.header .title').css('cursor', 'pointer').on('click', this.clickReplayBtn);
      }
      d3.select('.stats').style('top', statsYPos);
      d3.select('.yearStats').style('display', 'block');
      setTimeout(function() {
        return d3.select('.yearStats').classed('show', true);
      }, 50);
      return setTimeout(this.outroDigits, 1000);
    };

    FlightPatternsApp.prototype.outroDigits = function() {
      var btnToFadeIn, buttonFadeInDelay;
      this.setTickerNumber($('.yearlyStat-aircraftFreed .dailyStatsValue'), savingsCalculator.outputs.acSavedPerYear, 1, 42, 'blueDigit', true);
      this.setTickerNumber($('.yearlyStat-timeSavings .dailyStatsValue'), savingsCalculator.outputs.hoursSavedPerYear, 1000, 42, 'blueDigit', true);
      this.setTickerNumber($('.yearlyStat-moneySavings .dailyStatsValue'), savingsCalculator.outputs.totalSavingsPerYear, 1000000, 42, 'blueDigit', true);
      buttonFadeInDelay = 1000;
      btnToFadeIn = '.createBtn';
      if (this.presentMode) {
        btnToFadeIn = '.replayBtn';
      }
      return setTimeout(function() {
        return d3.select(btnToFadeIn).style('visibility', 'visible').style('opacity', '1');
      }, buttonFadeInDelay);
    };

    FlightPatternsApp.prototype.clickReplayBtn = function() {
      return document.location.reload();
    };

    FlightPatternsApp.prototype.clickCreateBtn = function() {
      d3.selectAll('.stats, .createBtn').style('opacity', 0);
      d3.selectAll('.yearStats').classed('show', false);
      return setTimeout(this.showCreateScreen, 1000);
    };

    FlightPatternsApp.prototype.showCreateScreen = function() {
      return d3.select('.create').style('visibility', 'visible').style('opacity', 1);
    };

    FlightPatternsApp.prototype.playNewScenario = function() {
      var ctxt, fleetURLVariable, inputs, lbl, minuteValue, newSize, sizeChoice, updateLink,
        _this = this;
      minuteValue = $('.minutesSlider').slider('value');
      sizeChoice = $('.airlineSizeSlider').slider('value');
      newSize = 0;
      lbl = '';
      if (sizeChoice === 1) {
        lbl = 'small';
      } else if (sizeChoice === 2) {
        lbl = 'medium';
      } else if (sizeChoice === 3) {
        lbl = 'large';
      }
      fleetURLVariable = lbl.charAt(0);
      newSize = savingsCalculator.fleetSizes[lbl];
      $('.dailyStat-airlineSize .dailyStatCaption').text(lbl + ' sized fleet');
      inputs = savingsCalculator.inputs;
      inputs.blockMinutesSaved = minuteValue;
      inputs.fleetSize = newSize;
      savingsCalculator.calculate();
      ctxt = this.ctxt;
      d3.select('#planesCanvas').transition().duration(1000).style('opacity', 0).style('-webkit-filter', 'blur(0px)').each('end', function(d, i) {
        ctxt.clearRect(0, 0, 960, 600);
        return d3.select(this).style('opacity', 1);
      });
      d3.select('.create').style('opacity', 0);
      d3.select('.stats').style('opacity', 1).style('top', '20px');
      updateLink = this.getCurrentShareLink();
      if (typeof history !== 'undefined' && typeof history.replaceState !== 'undefined') {
        history.replaceState(null, "", updateLink);
      }
      return setTimeout(function() {
        d3.select('.create').style('visibility', 'hidden');
        $('.mapClocks').fadeIn(400);
        return _this.initSimulation();
      }, 1000);
    };

    FlightPatternsApp.prototype.clickAboutLink = function() {
      return $('.aboutText').toggleClass('show');
    };

    FlightPatternsApp.prototype.getCurrentShareLink = function() {
      var fleetVar, link;
      link = document.location.protocol + "//" + document.location.host + document.location.pathname;
      fleetVar = '';
      if (savingsCalculator.inputs.fleetSize === savingsCalculator.fleetSizes.small) {
        fleetVar = 's';
      } else if (savingsCalculator.inputs.fleetSize === savingsCalculator.fleetSizes.medium) {
        fleetVar = 'm';
      } else if (savingsCalculator.inputs.fleetSize === savingsCalculator.fleetSizes.large) {
        fleetVar = 'l';
      }
      link += '?fleet=' + fleetVar;
      link += '&m=' + savingsCalculator.inputs.blockMinutesSaved;
      return link;
    };

    FlightPatternsApp.prototype.clickShareLink = function(e) {
      var emailBody, emailSubject, link, shareType, shareURL, twitterText;
      shareType = $(e.currentTarget).attr('class');
      link = encodeURIComponent(this.getCurrentShareLink());
      twitterText = encodeURIComponent('Think you can change the future of flight? See how GE Flight Quest challengers are');
      emailSubject = twitterText;
      emailBody = emailSubject;
      if (shareType === "facebook") {
        shareURL = 'http://www.facebook.com/sharer.php?u=' + link;
      } else if (shareType === "twitter") {
        shareURL = 'http://twitter.com/intent/tweet?text=' + twitterText + '&url=' + link;
      } else if (shareType === "gplus") {
        shareURL = 'https://plus.google.com/share?url=' + link;
      } else if (shareType === "email") {
        shareURL = 'mailto:?subject=' + emailSubject + '&body=' + emailSubject + encodeURIComponent("\n") + link;
        location.href = shareURL;
        return;
      }
      return window.open(shareURL, "share", "scrollbars=yes,resizable=yes,toolbar=no,location=yes,width=520,height=300");
    };

    return FlightPatternsApp;

  })(EventEmitter);

  window.FlightPatternsApp = FlightPatternsApp;

}).call(this);
