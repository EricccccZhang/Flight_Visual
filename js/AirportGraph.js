// Generated by CoffeeScript 1.4.0
(function() {
  var AirportGraph,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  AirportGraph = (function() {
    var loopMaxSize, loopMinSize;

    function AirportGraph() {
      this.findLoop = __bind(this.findLoop, this);

      this.findLoops = __bind(this.findLoops, this);

    }

    loopMinSize = 2;

    loopMaxSize = 4;

    AirportGraph.prototype.init = function(planes) {
      var graph, uniquePolyTracker, uniquePolys, verticies;
      verticies = [];
      this.planes = planes;
      _.each(planes, function(landedPlane, planeIndex) {
        var fromAirport, fromVertex, tarjanVertex, toAirport, toVertex, vertex, _i, _len;
        vertex = null;
        fromAirport = landedPlane.from;
        toAirport = landedPlane.to;
        fromVertex = null;
        toVertex = null;
        for (_i = 0, _len = verticies.length; _i < _len; _i++) {
          tarjanVertex = verticies[_i];
          if (tarjanVertex.name === fromAirport) {
            fromVertex = tarjanVertex;
          }
          if (tarjanVertex.name === toAirport) {
            toVertex = tarjanVertex;
          }
        }
        if (fromVertex === null) {
          fromVertex = new TarjanVertex(fromAirport);
          fromVertex.screen = landedPlane.fromScreen;
          fromVertex.planeIndex = planeIndex;
          fromVertex.index = verticies.length;
          verticies.push(fromVertex);
        }
        if (toVertex === null) {
          toVertex = new TarjanVertex(toAirport);
          toVertex.screen = landedPlane.toScreen;
          toVertex.planeIndex = planeIndex;
          toVertex.index = verticies.length;
          verticies.push(toVertex);
        }
        toVertex.connections.push(fromVertex);
        return fromVertex.connections.push(toVertex);
      }, this);
      graph = new TarjanGraph(verticies);
      this.graph = graph;
      console.log(graph);
      this.findLoops();
      uniquePolys = [];
      uniquePolyTracker = [];
      _.each(this.polys, function(polyPoints, index) {
        var polyID;
        polyID = 0;
        _.each(polyPoints, function(airportCode) {
          var ap, x, y;
          ap = app.airportsObject[airportCode];
          x = ap.pos[0];
          y = ap.pos[1];
          return polyID += x * 13 + y * 23;
        });
        polyID = Math.round(polyID);
        if (uniquePolyTracker.indexOf(polyID) === -1) {
          uniquePolyTracker.push(polyID);
          return uniquePolys.push(polyPoints);
        }
      });
      console.log(this.polys.length + " " + uniquePolys.length);
      return this.polys = uniquePolys;
    };

    AirportGraph.prototype.findLoops = function() {
      console.log('findloops');
      this.polys = [];
      return _.each(this.graph.vertices, this.findLoop);
    };

    AirportGraph.prototype.findLoop = function(airport, index) {
      var vertex, _i, _len, _ref;
      _ref = this.graph.vertices;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        vertex = _ref[_i];
        vertex.explored = false;
      }
      this.target = airport.name;
      this.list = [];
      return this.dfs(airport, 0);
    };

    AirportGraph.prototype.dfs = function(vertex, depth) {
      var neighbor, _i, _len, _ref;
      this.list.push(vertex.name);
      vertex.explored = true;
      _ref = vertex.connections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        neighbor = _ref[_i];
        if (neighbor.name === this.target && (depth >= loopMinSize && depth <= loopMaxSize)) {
          this.polys.push(this.list.slice());
        }
        if (neighbor.explored === false) {
          this.dfs(neighbor, depth + 1);
        }
      }
      return this.list.pop();
    };

    return AirportGraph;

  })();

  window.AirportGraph = AirportGraph;

}).call(this);
